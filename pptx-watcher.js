#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const chokidar = require('chokidar');
const FormData = require('form-data');
const axios = require('axios');

class PPTXWatcher {
  constructor(inputDir, outputDir, gotenbergUrl = 'http://localhost:3000', cleanupDays = 7) {
    this.inputDir = path.resolve(inputDir);
    this.outputDir = path.resolve(outputDir);
    this.gotenbergUrl = gotenbergUrl;
    this.cleanupDays = cleanupDays;
    this.processing = new Set();
    this.cleanupInterval = null;
  }

  async checkGotenberg() {
    try {
      const response = await axios.get(`${this.gotenbergUrl}/health`, { timeout: 5000 });
      console.log(`‚úì Gotenberg –¥–æ—Å—Ç—É–ø–µ–Ω: ${this.gotenbergUrl}`);
      return true;
    } catch (error) {
      console.error(`‚úó –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Gotenberg (${this.gotenbergUrl})`);
      console.error(`  ${error.message}`);
      console.error('\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å Gotenberg –∑–∞–ø—É—â–µ–Ω:');
      console.error('  docker-compose up -d');
      return false;
    }
  }

  isPdfExists(pptxPath) {
    const baseName = path.basename(pptxPath, path.extname(pptxPath));
    const pdfPath = path.join(this.outputDir, `${baseName}.pdf`);
    return fs.existsSync(pdfPath);
  }

  isPdfNewer(pptxPath) {
    const baseName = path.basename(pptxPath, path.extname(pptxPath));
    const pdfPath = path.join(this.outputDir, `${baseName}.pdf`);

    if (!fs.existsSync(pdfPath)) {
      return false;
    }

    try {
      const pptxStats = fs.statSync(pptxPath);
      const pdfStats = fs.statSync(pdfPath);
      return pdfStats.mtime > pptxStats.mtime;
    } catch (error) {
      return false;
    }
  }

  cleanupOldFiles() {
    console.log(`\n${'='.repeat(60)}`);
    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ (—Å—Ç–∞—Ä—à–µ ${this.cleanupDays} –¥–Ω–µ–π)...`);

    const now = Date.now();
    const maxAge = this.cleanupDays * 24 * 60 * 60 * 1000; // –¥–Ω–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    let deletedCount = 0;

    // –û—á–∏—Å—Ç–∫–∞ PPTX —Ñ–∞–π–ª–æ–≤
    try {
      const pptxFiles = fs.readdirSync(this.inputDir);

      for (const file of pptxFiles) {
        const ext = path.extname(file).toLowerCase();
        if (!['.pptx', '.ppt'].includes(ext)) {
          continue;
        }

        const filePath = path.join(this.inputDir, file);
        const stats = fs.statSync(filePath);
        const age = now - stats.mtime.getTime();

        if (age > maxAge) {
          const baseName = path.basename(file, ext);
          const pdfPath = path.join(this.outputDir, `${baseName}.pdf`);

          // –£–¥–∞–ª—è–µ–º PPTX
          try {
            fs.unlinkSync(filePath);
            console.log(`üóë –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π PPTX: ${file}`);
            deletedCount++;
          } catch (error) {
            console.error(`‚úó –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${file}: ${error.message}`);
          }

          // –£–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π PDF –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if (fs.existsSync(pdfPath)) {
            try {
              fs.unlinkSync(pdfPath);
              console.log(`üóë –£–¥–∞–ª–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π PDF: ${baseName}.pdf`);
              deletedCount++;
            } catch (error) {
              console.error(`‚úó –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${baseName}.pdf: ${error.message}`);
            }
          }
        }
      }
    } catch (error) {
      console.error(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ PPTX: ${error.message}`);
    }

    // –û—á–∏—Å—Ç–∫–∞ PDF —Ñ–∞–π–ª–æ–≤
    try {
      const pdfFiles = fs.readdirSync(this.outputDir);
      const pptxFiles = fs.readdirSync(this.inputDir);

      // –°–æ–∑–¥–∞–µ–º Set –∏–º–µ–Ω PPTX —Ñ–∞–π–ª–æ–≤ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è) –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      const pptxBaseNames = new Set(
        pptxFiles
          .filter(file => ['.pptx', '.ppt'].includes(path.extname(file).toLowerCase()))
          .map(file => path.basename(file, path.extname(file)))
      );

      for (const file of pdfFiles) {
        if (path.extname(file).toLowerCase() !== '.pdf') {
          continue;
        }

        const filePath = path.join(this.outputDir, file);
        const baseName = path.basename(file, '.pdf');
        const stats = fs.statSync(filePath);
        const age = now - stats.mtime.getTime();

        // –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ PPTX (–æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–π PDF)
        if (!pptxBaseNames.has(baseName)) {
          try {
            fs.unlinkSync(filePath);
            console.log(`üóë –£–¥–∞–ª–µ–Ω –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–π PDF (–Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ PPTX): ${file}`);
            deletedCount++;
          } catch (error) {
            console.error(`‚úó –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${file}: ${error.message}`);
          }
          continue;
        }

        // –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —Å—Ç–∞—Ä—à–µ —Å—Ä–æ–∫–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        if (age > maxAge) {
          try {
            fs.unlinkSync(filePath);
            console.log(`üóë –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π PDF: ${file}`);
            deletedCount++;
          } catch (error) {
            console.error(`‚úó –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${file}: ${error.message}`);
          }
        }
      }
    } catch (error) {
      console.error(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ PDF: ${error.message}`);
    }

    if (deletedCount === 0) {
      console.log(`‚úì –°—Ç–∞—Ä—ã—Ö –∏ –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    } else {
      console.log(`‚úì –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${deletedCount}`);
    }
    console.log(`${'='.repeat(60)}`);
  }


  startCleanupScheduler() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    this.cleanupOldFiles();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    this.cleanupInterval = setInterval(() => {
      this.cleanupOldFiles();
    }, 24 * 60 * 60 * 1000);

    console.log(`‚úì –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞)\n`);
  }

  async convertFile(pptxPath) {
    const fileName = path.basename(pptxPath);
    const baseName = path.basename(pptxPath, path.extname(pptxPath));
    const outputPath = path.join(this.outputDir, `${baseName}.pdf`);

    console.log(`\n${'='.repeat(60)}`);
    console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${fileName}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è PDF
    if (this.isPdfExists(pptxPath)) {
      if (this.isPdfNewer(pptxPath)) {
        console.log(`‚äò PDF —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç—É–∞–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: ${baseName}.pdf`);
        return;
      } else {
        console.log(`‚ü≥ PDF —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ PPTX –Ω–æ–≤–µ–µ, –æ–±–Ω–æ–≤–ª—è–µ–º...`);
      }
    }

    console.log(`–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PDF —á–µ—Ä–µ–∑ Gotenberg...`);

    try {
      const form = new FormData();
      form.append('files', fs.createReadStream(pptxPath), {
        filename: fileName,
        contentType: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
      });

      const response = await axios.post(
        `${this.gotenbergUrl}/forms/libreoffice/convert`,
        form,
        {
          headers: form.getHeaders(),
          responseType: 'arraybuffer',
          timeout: 120000,
          maxContentLength: Infinity,
          maxBodyLength: Infinity
        }
      );

      if (response.status === 200) {
        fs.writeFileSync(outputPath, response.data);
        const sizeKB = (response.data.length / 1024).toFixed(2);
        console.log(`‚úì –£—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${path.basename(outputPath)}`);
        console.log(`  –†–∞–∑–º–µ—Ä: ${sizeKB} KB`);
      } else {
        console.error(`‚úó –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: HTTP ${response.status}`);
      }
    } catch (error) {
      console.error(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: ${error.message}`);
      if (error.response) {
        console.error(`  HTTP ${error.response.status}: ${error.response.statusText}`);
      }
    }
  }

  async handleNewFile(filePath) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    const ext = path.extname(filePath).toLowerCase();
    if (!['.pptx', '.ppt'].includes(ext)) {
      return;
    }

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    if (this.processing.has(filePath)) {
      return;
    }

    this.processing.add(filePath);

    try {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (fs.existsSync(filePath)) {
        await this.convertFile(filePath);
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${path.basename(filePath)}: ${error.message}`);
    } finally {
      this.processing.delete(filePath);
    }
  }

  async start() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if (!fs.existsSync(this.inputDir)) {
      console.error(`–û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ '${this.inputDir}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
      process.exit(1);
    }

    // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(this.outputDir)) {
      fs.mkdirSync(this.outputDir, { recursive: true });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Gotenberg
    const isAvailable = await this.checkGotenberg();
    if (!isAvailable) {
      process.exit(1);
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å
    console.log(`\n${'='.repeat(60)}`);
    console.log('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω');
    console.log(`–í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞:  ${this.inputDir}`);
    console.log(`–í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: ${this.outputDir}`);
    console.log(`Gotenberg URL:  ${this.gotenbergUrl}`);
    console.log(`–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è:  ${this.cleanupDays} –¥–Ω–µ–π`);
    console.log(`\n–û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö PPTX —Ñ–∞–π–ª–æ–≤... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)`);
    console.log(`${'='.repeat(60)}`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏
    this.startCleanupScheduler();

    const watcher = chokidar.watch(this.inputDir, {
      ignored: /(^|[\/\\])\../,
      persistent: true,
      ignoreInitial: false,
      depth: 0,
      awaitWriteFinish: {
        stabilityThreshold: 2000,
        pollInterval: 100
      }
    });

    watcher.on('add', (filePath) => {
      this.handleNewFile(filePath);
    });

    watcher.on('change', (filePath) => {
      // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      this.handleNewFile(filePath);
    });

    watcher.on('error', (error) => {
      console.error(`–û—à–∏–±–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è: ${error.message}`);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', () => {
      console.log('\n\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
      if (this.cleanupInterval) {
        clearInterval(this.cleanupInterval);
      }
      watcher.close();
      process.exit(0);
    });
  }
}

// CLI –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (require.main === module) {
  const args = process.argv.slice(2);

  let inputDir, outputDir, gotenbergUrl, cleanupDays;

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∞—Ä–≥—É–º–µ–Ω—Ç—ã CLI > –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è > –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  if (args.length >= 2) {
    inputDir = args[0];
    outputDir = args[1];
    gotenbergUrl = args[2] || process.env.GOTENBERG_URL || 'http://localhost:3000';
    cleanupDays = parseInt(args[3] || process.env.CLEANUP_DAYS || '7');
  } else if (process.env.INPUT_DIR && process.env.OUTPUT_DIR) {
    inputDir = process.env.INPUT_DIR;
    outputDir = process.env.OUTPUT_DIR;
    gotenbergUrl = process.env.GOTENBERG_URL || 'http://localhost:3000';
    cleanupDays = parseInt(process.env.CLEANUP_DAYS || '7');
  } else {
    console.log(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node pptx-watcher.js <input_dir> <output_dir> [gotenberg_url] [cleanup_days]

–ê—Ä–≥—É–º–µ–Ω—Ç—ã:
input_dir      –ü–∞–ø–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–≥–¥–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è PPTX —Ñ–∞–π–ª—ã)
output_dir     –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF —Ñ–∞–π–ª–æ–≤
gotenberg_url  URL Gotenberg —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:3000)
cleanup_days   –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –¥–Ω—è—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 7)

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
INPUT_DIR      –í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞
OUTPUT_DIR     –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞
GOTENBERG_URL  URL Gotenberg —Å–µ—Ä–≤–µ—Ä–∞
CLEANUP_DAYS   –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –¥–Ω—è—Ö

–ü—Ä–∏–º–µ—Ä—ã:
node pptx-watcher.js ./pptx ./pdf
node pptx-watcher.js ./pptx ./pdf http://localhost:3000 14
`);
    process.exit(0);
  }

  const watcher = new PPTXWatcher(inputDir, outputDir, gotenbergUrl, cleanupDays);
  watcher.start();
}

module.exports = PPTXWatcher;
